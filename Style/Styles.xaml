<ResourceDictionary xmlns:local="clr-namespace:WpfXmlDemo"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"                    
                    >    
    
    <!--<Color x:Key="WindowBackgroundColor">#202020</Color>
    <Color x:Key="BackgroundColor">#404040</Color>
    <Color x:Key="ControlBackgroundColor">#FF646464</Color>
    <Color x:Key="ButtonColor">#FF8C8C8C</Color>
    <Color x:Key="TextColor">#FFFFFF</Color>   
    <Color x:Key="BorderBackgroundColor">#404040</Color>
    <Color x:Key="BorderColor">#404040</Color>
    <Color x:Key="SelectedBorderColor">#FFFFFF</Color>
    <Color x:Key="StatusColorOne">#FFFF6347</Color>
    <Color x:Key="StatusColorTwo">#FFFFDAB9</Color>
    <Color x:Key="StatusColorThree">#FFDEFFAB</Color>-->
    <Color x:Key="WindowBackgroundColor">White</Color>
    <Color x:Key="BackgroundColor">White</Color>
    <Color x:Key="ControlBackgroundColor">White</Color>
    <Color x:Key="ButtonColor">#FF8C8C8C</Color>
    <Color x:Key="TextColor">Black</Color>
    <Color x:Key="BorderBackgroundColor">White</Color>
    <Color x:Key="BorderColor">White</Color>
    <Color x:Key="SelectedBorderColor">White</Color>
    <Color x:Key="StatusColorOne">White</Color>
    <Color x:Key="StatusColorTwo">White</Color>
    <Color x:Key="StatusColorThree">White</Color>
    <!--Expander Toggle button control template-->
    <ControlTemplate x:Key="AnimatedExpanderBtnTemplate" TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder"
                    Padding="{TemplateBinding Padding}"                    
                    HorizontalAlignment="Stretch" CornerRadius="5"
                    Height="28"
                    Width="{Binding
                                RelativeSource={RelativeSource
                                                Mode=FindAncestor, AncestorType={x:Type Expander}}, Path=ActualWidth}"
                    Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Expander}}, Path=Background}">

            <!--<Border.Background>
                --><!--<ImageBrush ImageSource="/Images/ui-bg_gloss-wave_16_121212_500x100.png"></ImageBrush>--><!--
                <SolidColorBrush Color="#FF2543FF"></SolidColorBrush>
            </Border.Background>-->
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Rectangle Fill="Transparent"
                               Grid.ColumnSpan="2"                               
                               />
                <Ellipse Name="Circle"
                         Grid.Column="0"
                         Stroke="DarkGray"
                         Width="20"
                         Height="20"
                         Fill="White"
                         HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         />
                <Path x:Name="Arrow"
                      Grid.Column="0"
                      Data="M 1,1.5 L 4.5,5 8,1.5"
                      Stroke="Blue"
                      StrokeThickness="2"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      RenderTransformOrigin="0.5,0.5"
                      >
                    <Path.RenderTransform>
                        <RotateTransform Angle="0"/>
                    </Path.RenderTransform>
                </Path>
                <ContentPresenter x:Name="HeaderContent"                                  
                                      Grid.Column="1"
                                      Margin="4,0,0,0"                                      
                                      ContentSource="Content" />
            </Grid>
            <Border.Style>
                <Style>
                    <Setter Property="Border.BorderThickness" Value="2,2,1,1"></Setter>                       
                    <Setter Property="Border.BorderBrush" Value="#FF2543FF"></Setter>
                    <Style.Triggers>
                        <Trigger Property="Border.IsMouseOver" Value="True">
                            <Setter Property="Border.BorderBrush" Value="LightBlue" />
                        </Trigger>
                    </Style.Triggers>                 
                   
                </Style>
            </Border.Style>
        </Border>
        <ControlTemplate.Triggers>
            <!-- Animate arrow when toggled-->
            <Trigger Property="IsChecked"
                         Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="180"
                                                 Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="0"
                                                 Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <!-- MouseOver, Pressed behaviours-->
            <Trigger Property="IsMouseOver"
                                 Value="true">
                <Setter Property="Stroke"
                                    Value="#FF3C7FB1"
                                    TargetName="Circle"/>
                <Setter Property="Stroke"
                                    Value="#FF3C7FB1"
                                    TargetName="Arrow"/>
            </Trigger>
            <Trigger Property="IsPressed"
                                 Value="true">
                <Setter Property="Stroke"
                                    Value="#FF526C7B"
                                    TargetName="Circle"/>
                <Setter Property="StrokeThickness"
                                    Value="1.5"
                                    TargetName="Circle"/>
                <Setter Property="Stroke"
                                    Value="#FF003366"
                                    TargetName="Arrow"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Stretchy Expander control template-->
    <ControlTemplate x:Key="StretchyExpanderTemp" TargetType="{x:Type Expander}">
        <DockPanel>
            <ToggleButton x:Name="ExpanderButton" 
                              DockPanel.Dock="Top"
                              Template="{StaticResource AnimatedExpanderBtnTemplate}"
                              Content="{TemplateBinding Header}"
                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                              OverridesDefaultStyle="True"
                              Padding="1.5,0">
            </ToggleButton>
            <ContentPresenter x:Name="ExpanderContent"
                                  ContentSource="Content"
                                  DockPanel.Dock="Bottom"
                                  >
                <ContentPresenter.LayoutTransform>
                    <ScaleTransform ScaleY="0"/>
                </ContentPresenter.LayoutTransform>
            </ContentPresenter>
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"                                                 
                                                 To="1"
                                                 Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                                 To="0"
                                                 Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>               
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- every TextBox with property Style="{StaticResource TextBoxBaseStyle}" will use this style -->
    <Style x:Key="TextBoxBaseStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource ControlBackgroundColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource TextColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="8 4"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="4,4,4,4"/>
        <!--<Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource BorderColor}"/>
            </Setter.Value>
        </Setter>-->
        <!--<Setter Property="Template" Value="{StaticResource TextBoxTemplateBase}"/>-->
    </Style>
    <Style x:Key="ListBoxItemBaseStyle" TargetType="ListBoxItem">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource WindowBackgroundColor}" />
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="LabelBaseStyle" TargetType="{x:Type Label}">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="Transparent"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource TextColor}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="8 4"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/> 
        
    </Style>
    <Style x:Key="ButtonBaseStyle" TargetType="{x:Type Button}">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource BackgroundColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource TextColor}"/>
            </Setter.Value>
        </Setter>
        
    </Style>
    <Style x:Key="WindowBaseStyle" TargetType="{x:Type Window}">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource WindowBackgroundColor}" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollViewerBaseStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource WindowBackgroundColor}" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DockPanelBaseStyle" TargetType="{x:Type DockPanel}">
        <!--<Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource WindowBackgroundColor}" />
            </Setter.Value>
        </Setter>-->
    </Style>
    <Style x:Key="StackPanelBaseStyle" TargetType="{x:Type StackPanel}">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource WindowBackgroundColor}" />
            </Setter.Value>
        </Setter>
    </Style>
    <!-- and if you want to all TextBox `es to use this style, you have to add this line of code: -->
    <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxBaseStyle}" />
    <Style x:Key="{x:Type Label}" TargetType="{x:Type Label}" BasedOn="{StaticResource LabelBaseStyle}" />
    <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBaseStyle}" />
    <Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ListBoxItemBaseStyle}" />
    <Style x:Key="{x:Type Window}" TargetType="{x:Type Window}" BasedOn="{StaticResource WindowBaseStyle}" />
    <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerBaseStyle}" />
    <Style x:Key="{x:Type DockPanel}" TargetType="{x:Type DockPanel}" BasedOn="{StaticResource DockPanelBaseStyle}" />
    <Style x:Key="{x:Type StackPanel}" TargetType="{x:Type StackPanel}" BasedOn="{StaticResource StackPanelBaseStyle}" />
</ResourceDictionary>